#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ml-server:server');
var http = require('http');

var logger = require('../common/logger');

var config = require('../app.config');

/**
 * 从外部获取端口号，并设置给 express
 */
var port = normalizePort(process.env.PORT || config.app_port);
app.set('port', port);

/**
 *  创建 Http server
 */
var server = http.createServer(app);

/**
 * 从所有的网络端口中监听当前项目所提供的端口
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 将端口标准化
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/**
 * HTTP server onError 监听
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.e('%s requires elevated privileges', bind);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.e(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * HTTP server onListening 监听
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    logger.i("VMServer has started！Listener port: %d", port);
}
